#!/usr/bin/env python
import asyncio
import websockets
import socket
import logging

# ロギングの設定
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("websocket-server")

# ローカルIPアドレスを取得
def get_local_ip():
    try:
        # テスト接続を作成してローカルIPを取得
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except Exception as e:
        logger.error(f"IPアドレス取得エラー: {e}")
        return "127.0.0.1"  # デフォルトでlocalhostを使用

# メッセージハンドラ
async def message_handler(websocket, path):
    client_ip = websocket.remote_address[0]
    logger.info(f"クライアント接続: {client_ip}")
    
    try:
        async for message in websocket:
            logger.info(f"受信メッセージ: {message} (送信元: {client_ip})")
            
            # クライアントからのメッセージを処理して応答
            response = f"メッセージを受信しました: {message}"
            await websocket.send(response)
            logger.info(f"応答を送信: {response}")
            
    except websockets.exceptions.ConnectionClosed as e:
        logger.info(f"クライアント切断: {client_ip}, コード: {e.code}, 理由: {e.reason}")
    except Exception as e:
        logger.error(f"エラー発生: {e}")

async def main():
    local_ip = get_local_ip()
    port = 8080
    
    logger.info(f"サーバー起動中... IP: {local_ip}, ポート: {port}")
    
    # プロキシ設定がある場合でも問題ないようにすべてのインターフェースでリッスン
    server = await websockets.serve(
        message_handler, 
        "0.0.0.0",  # すべてのネットワークインターフェースをリッスン
        port,
        ping_interval=30,  # プロキシで切断されないようにping間隔を設定
        ping_timeout=10
    )
    
    logger.info(f"WebSocketサーバーが起動しました - ws://{local_ip}:{port}")
    logger.info("終了するには Ctrl+C を押してください")
    
    # サーバーを実行し続ける
    await server.wait_closed()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("サーバーを終了します...")
    except Exception as e:
        logger.error(f"予期せぬエラー: {e}")
