import voicevox_core
import pygame
import tempfile
import os

def find_voicevox_model_dir():
    """
    Windows環境でVOICEVOXデスクトップアプリのモデルディレクトリを自動検出
    """
    # Windows環境でのパス候補
    base_paths = [
        os.path.expanduser("~/AppData/Local/Programs/VOICEVOX/resources/engine/model"),
        "C:/Program Files/VOICEVOX/resources/engine/model",
        "C:/Program Files (x86)/VOICEVOX/resources/engine/model"
    ]
    
    # 存在するパスを探す
    for path in base_paths:
        if os.path.exists(path):
            print(f"VOICEVOXモデルディレクトリが見つかりました: {path}")
            return path
    
    # 見つからない場合はエラー
    raise Exception("VOICEVOXモデルディレクトリが見つかりません。VOICEVOXデスクトップアプリがインストールされていることを確認してください。")

def play_voicevox_audio(text, speaker_id=0, model_dir=None):
    """
    VOICEVOX Coreを使用してテキストを音声に変換し、再生する
    
    Args:
        text (str): 読み上げるテキスト
        speaker_id (int): スピーカーID（0: 四国めたん など）
        model_dir (str): モデルファイルのディレクトリパス（Noneの場合は自動検出）
    """
    try:
        # VOICEVOXデスクトップアプリのモデルディレクトリを自動検出
        if model_dir is None:
            model_dir = find_voicevox_model_dir()
        
        # Open JTalk辞書のパス
        open_jtalk_dict_path = os.path.join(model_dir, "open_jtalk_dic_utf_8-1.11")
        
        # VOICEVOX Coreの初期化
        core = voicevox_core.VoicevoxCore(
            acceleration_mode=voicevox_core.AccelerationMode.AUTO,
            cpu_num_threads=0,
            load_all_models=True,
            open_jtalk_dict_dir=open_jtalk_dict_path
        )
        
        # 利用可能なスピーカーを確認
        print("利用可能なスピーカー:")
        for speaker in core.metas:
            print(f"  {speaker.name}: {[style.id for style in speaker.styles]}")
        
        # テキストから音声クエリを作成
        audio_query = core.audio_query(text, speaker_id)
        
        # 音声を合成
        wav_bytes = core.synthesis(audio_query, speaker_id)
        
        # pygameで音声を再生
        pygame.mixer.init()
        
        # バイトデータを一時ファイルに保存
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
            tmp_file.write(wav_bytes)
            tmp_file_path = tmp_file.name
        
        try:
            # 音声ファイルを読み込んで再生
            pygame.mixer.music.load(tmp_file_path)
            pygame.mixer.music.play()
            
            # 再生完了まで待機
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
                
            print(f"音声再生完了: '{text}'")
            
        finally:
            # 一時ファイルを削除
            os.unlink(tmp_file_path)
            
    except Exception as e:
        print(f"エラーが発生しました: {e}")
    finally:
        pygame.mixer.quit()

def play_voicevox_simple(text, speaker_id=0):
    """
    Windows環境でVOICEVOXの音声再生（最もシンプルな方法）
    """
    try:
        # VOICEVOXデスクトップアプリのモデルディレクトリを自動検出
        model_dir = find_voicevox_model_dir()
        
        # Open JTalk辞書のパス
        open_jtalk_dict_path = os.path.join(model_dir, "open_jtalk_dic_utf_8-1.11")
        
        # VOICEVOX Coreの初期化
        core = voicevox_core.VoicevoxCore(
            acceleration_mode=voicevox_core.AccelerationMode.AUTO,
            cpu_num_threads=0,
            load_all_models=True,
            open_jtalk_dict_dir=open_jtalk_dict_path
        )
        
        # 音声クエリ作成
        audio_query = core.audio_query(text, speaker_id)
        
        # 音声合成
        wav_bytes = core.synthesis(audio_query, speaker_id)
        
        # pygame初期化
        pygame.mixer.init()
        
        # 一時ファイルに保存して再生
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
            tmp_file.write(wav_bytes)
            tmp_file_path = tmp_file.name
        
        try:
            # 音声ファイルを読み込んで再生
            pygame.mixer.music.load(tmp_file_path)
            pygame.mixer.music.play()
            
            # 再生完了まで待機
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
                
            print(f"音声再生完了: '{text}'")
            
        finally:
            # 一時ファイルを削除
            os.unlink(tmp_file_path)
            
    except Exception as e:
        print(f"エラーが発生しました: {e}")
    finally:
        pygame.mixer.quit()

def get_character_ids(character_name):
    """
    特定のキャラクターのスピーカーIDを取得
    """
    try:
        model_dir = find_voicevox_model_dir()
        open_jtalk_dict_path = os.path.join(model_dir, "open_jtalk_dic_utf_8-1.11")
        
        core = voicevox_core.VoicevoxCore(
            acceleration_mode=voicevox_core.AccelerationMode.AUTO,
            cpu_num_threads=0,
            load_all_models=True,
            open_jtalk_dict_dir=open_jtalk_dict_path
        )
        
        character_ids = []
        for speaker in core.metas:
            if character_name in speaker.name:
                for style in speaker.styles:
                    character_ids.append({
                        'name': speaker.name,
                        'style': style.name,
                        'id': style.id
                    })
        
        return character_ids
        
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return []

def get_available_speakers():
    """
    利用可能なスピーカー一覧を取得
    """
    try:
        model_dir = find_voicevox_model_dir()
        open_jtalk_dict_path = os.path.join(model_dir, "open_jtalk_dic_utf_8-1.11")
        
        core = voicevox_core.VoicevoxCore(
            acceleration_mode=voicevox_core.AccelerationMode.AUTO,
            cpu_num_threads=0,
            load_all_models=True,
            open_jtalk_dict_dir=open_jtalk_dict_path
        )
        
        print("利用可能なスピーカー:")
        for speaker in core.metas:
            print(f"  {speaker.name}:")
            for style in speaker.styles:
                print(f"    ID: {style.id}, スタイル: {style.name}")
        
        return core.metas
        
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return []

# 使用例
if __name__ == "__main__":
    # まず利用可能なスピーカーを確認
    print("=== 利用可能なスピーカー一覧 ===")
    get_available_speakers()
    
    print("\n=== 春日部つむぎ・もち子さんのIDを確認 ===")
    tsumugi_ids = get_character_ids("春日部つむぎ")
    mochiko_ids = get_character_ids("もち子さん")
    
    print("春日部つむぎのスタイル:")
    for char_info in tsumugi_ids:
        print(f"  ID: {char_info['id']}, スタイル: {char_info['style']}")
    
    print("もち子さんのスタイル:")
    for char_info in mochiko_ids:
        print(f"  ID: {char_info['id']}, スタイル: {char_info['style']}")
    
    print("\n=== 音声再生テスト ===")
    
    try:
        # 春日部つむぎで再生
        print("春日部つむぎで再生中...")
        play_with_character("こんにちは、春日部つむぎです。", "春日部つむぎ")
        
        # もち子さんで再生
        print("もち子さんで再生中...")
        play_with_character("こんにちは、もち子です。", "もち子さん")
        
        # 特定のスタイルで再生
        if tsumugi_ids:
            print("春日部つむぎ（おしとやか）で再生中...")
            play_with_character("おしとやかな声で話します。", "春日部つむぎ", "おしとやか")
        
    except Exception as e:
        print(f"エラー: {e}")
        print("VOICEVOXデスクトップアプリがインストールされていることを確認してください。")
