import asyncio
import websockets
import logging
import os
import sys
import socket
import time

# ロギングの設定
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("websocket-client")

# プロキシ設定を環境変数から取得
def get_proxy_settings():
    http_proxy = os.environ.get('HTTP_PROXY') or os.environ.get('http_proxy', '')
    https_proxy = os.environ.get('HTTPS_PROXY') or os.environ.get('https_proxy', '')
    
    logger.info(f"HTTP プロキシ: {http_proxy}")
    logger.info(f"HTTPS プロキシ: {https_proxy}")
    
    return http_proxy, https_proxy

# サーバーからのメッセージを受信する関数
async def receive_messages(websocket):
    try:
        while True:
            try:
                message = await websocket.recv()
                logger.info(f"サーバーからのメッセージ: {message}")
            except websockets.exceptions.ConnectionClosed:
                logger.error("接続が閉じられました。再接続を試みます...")
                break
    except Exception as e:
        logger.error(f"受信処理でエラー発生: {e}")

# ユーザー入力を処理する関数
async def process_user_input(websocket):
    try:
        while True:
            message = await asyncio.get_event_loop().run_in_executor(
                None, lambda: input("送信するメッセージを入力してください (終了するには 'exit' と入力): ")
            )
            
            if message.lower() == 'exit':
                logger.info("クライアントを終了します...")
                return
            
            logger.info(f"メッセージ送信中: {message}")
            await websocket.send(message)
    except Exception as e:
        logger.error(f"送信処理でエラー発生: {e}")

# プロキシ設定を使用して接続を確立
async def connect_to_server(server_url):
    http_proxy, https_proxy = get_proxy_settings()
    
    # プロキシ設定がある場合の処理
    proxy_params = {}
    if http_proxy:
        # プロキシURLからホストとポートを抽出
        proxy_url = http_proxy.replace('http://', '')
        if ':' in proxy_url:
            proxy_host, proxy_port = proxy_url.split(':')
            proxy_port = int(proxy_port)
        else:
            proxy_host = proxy_url
            proxy_port = 80
            
        proxy_params = {
            'proxy': http_proxy,
            'origin': f'http://{socket.gethostname()}'
        }
        
        logger.info(f"プロキシを使用: {proxy_host}:{proxy_port}")
    
    # 接続切断時に再接続を試みる
    reconnect_attempts = 0
    max_reconnect_attempts = 5
    reconnect_delay = 2
    
    while True:
        try:
            # websockets接続を確立
            async with websockets.connect(
                server_url,
                ping_interval=30,
                ping_timeout=10,
                **proxy_params
            ) as websocket:
                logger.info(f"サーバーに接続しました: {server_url}")
                reconnect_attempts = 0  # 接続成功したらリセット
                
                # サーバーからのメッセージ受信とユーザー入力処理を並行して実行
                await asyncio.gather(
                    receive_messages(websocket),
                    process_user_input(websocket)
                )
                
                # ユーザーが終了を選択した場合はループを抜ける
                break
                
        except websockets.exceptions.ConnectionClosed as e:
            reconnect_attempts += 1
            if reconnect_attempts <= max_reconnect_attempts:
                wait_time = reconnect_delay * reconnect_attempts
                logger.error(f"接続が閉じられました: コード {e.code}, 理由: {e.reason}")
                logger.info(f"{wait_time}秒後に再接続を試みます... (試行 {reconnect_attempts}/{max_reconnect_attempts})")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"再接続の最大試行回数に達しました。終了します。")
                break
        except Exception as e:
            reconnect_attempts += 1
            if reconnect_attempts <= max_reconnect_attempts:
                wait_time = reconnect_delay * reconnect_attempts
                logger.error(f"接続エラー: {e}")
                logger.info(f"{wait_time}秒後に再接続を試みます... (試行 {reconnect_attempts}/{max_reconnect_attempts})")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"再接続の最大試行回数に達しました。終了します。")
                break

async def main():
    if len(sys.argv) > 1:
        server_ip = sys.argv[1]
    else:
        server_ip = input("サーバーのIPアドレスを入力してください: ")
    
    server_url = f"ws://{server_ip}:8080"
    logger.info(f"接続先: {server_url}")
    
    await connect_to_server(server_url)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("クライアントを終了します...")
    except Exception as e:
        logger.error(f"予期せぬエラー: {e}")



【主な変更点】
1.サーバーからのメッセージを常に受信する機能追加:
  receive_messages() 関数を新設し、サーバーからのメッセージをリアルタイムで継続的に受信します
  メッセージ受信は独立したタスクとして実行されるため、ユーザー入力を待つ間もメッセージを受信できます

2.ユーザー入力処理の分離:
  process_user_input() 関数を新設し、ユーザー入力処理を独立したタスクとして実行します
  非同期環境でのブロッキング入力を処理するため、run_in_executorを使用しています

3.並行処理の実装:
  asyncio.gather()を使用して、メッセージ受信処理とユーザー入力処理を並行して実行します


4.再接続メカニズムの追加:
  接続が切断された場合に自動的に再接続を試みる機能を追加しました
  最大再接続試行回数とバックオフ遅延を設定し、安定した接続を維持します

5.エラー処理の強化:
  各処理部分にエラーハンドリングを追加し、予期せぬエラーが発生しても復旧できるようにしました


このコードにより、サーバーからの任意のタイミングでのメッセージを受信でき、また接続が切断された場合には自動的に再接続を試みることで、実行中は常に接続が維持されるようになります。
