import asyncio
import websockets
import logging
import os
import sys
import socket
import time
import flet as ft
from flet.auth.providers import ProviderOptions
from functools import partial

# ロギングの設定
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("websocket-client")

# メッセージ履歴を保存するグローバル変数
message_history = []
flet_page = None
message_queue = asyncio.Queue()

# ウィンドウの状態を管理する変数
window_closed_by_server = False

# プロキシ設定を環境変数から取得
def get_proxy_settings():
    http_proxy = os.environ.get('HTTP_PROXY') or os.environ.get('http_proxy', '')
    https_proxy = os.environ.get('HTTPS_PROXY') or os.environ.get('https_proxy', '')
    
    logger.info(f"HTTP プロキシ: {http_proxy}")
    logger.info(f"HTTPS プロキシ: {https_proxy}")
    
    return http_proxy, https_proxy

# Fletのページ初期化
def init_page(page):
    global flet_page, window_closed_by_server
    flet_page = page
    window_closed_by_server = False
    
    # ウィンドウがユーザーによって閉じられた時の処理
    def on_window_close(e):
        global window_closed_by_server
        if not window_closed_by_server:
            logger.info("ユーザーによってウィンドウが閉じられました")
        page.window_close()
    
    page.title = "WebSocketクライアント"
    page.vertical_alignment = ft.MainAxisAlignment.CENTER
    page.on_window_event = lambda e: on_window_close(e) if e.data == "close" else None
    
    # ステータスバー
    status_text = ft.Text("サーバーに接続中...", color=ft.colors.GREEN)
    
    # メッセージ表示領域
    message_list = ft.ListView(
        expand=True,
        spacing=10,
        padding=20,
        auto_scroll=True
    )
    
    # Fletページの構築
    page.add(
        ft.Container(
            content=ft.Column([
                ft.Row([
                    ft.Text("サーバーからのメッセージ", size=20, weight=ft.FontWeight.BOLD),
                    status_text
                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                ft.Divider(),
                ft.Container(
                    content=message_list,
                    height=400,
                    border=ft.border.all(1, ft.colors.OUTLINE),
                    border_radius=5,
                    padding=10,
                    expand=True
                ),
                ft.Row([
                    ft.Text("※サーバーから'CLOSE'メッセージを受信するとウィンドウが閉じます", 
                           size=12, color=ft.colors.GREY),
                    ft.ElevatedButton("閉じる", on_click=lambda e: page.window_close()),
                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)
            ]),
            padding=20,
            expand=True
        )
    )
    
    # メッセージキューを監視する関数を開始
    page.task_running = True
    asyncio.create_task(process_message_queue(message_list))

# メッセージキューを処理する非同期関数
async def process_message_queue(message_list):
    while flet_page and flet_page.task_running:
        try:
            # キューからメッセージを取得（ブロッキング操作）
            message = await message_queue.get()
            
            # UIスレッドでメッセージリストを更新
            message_item = ft.Container(
                content=ft.Text(message, selectable=True),
                bgcolor=ft.colors.SURFACE_VARIANT,
                border_radius=5,
                padding=10,
                width=float("inf")  # 最大幅まで広げる
            )
            
            await flet_page.run_async(lambda: message_list.controls.append(message_item))
            await flet_page.run_async(lambda: flet_page.update())
            
            # キュー処理完了を通知
            message_queue.task_done()
        except Exception as e:
            logger.error(f"メッセージキュー処理エラー: {e}")
            await asyncio.sleep(0.5)  # エラー時は少し待機

# サーバーからのメッセージを受信する関数
async def receive_messages(websocket):
    try:
        while True:
            try:
                message = await websocket.recv()
                timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                formatted_message = f"[{timestamp}] {message}"
                logger.info(f"サーバーからのメッセージ: {message}")
                
                # メッセージ履歴に追加
                message_history.append(formatted_message)
                
                # メッセージキューに追加
                await message_queue.put(formatted_message)
                
                # "CLOSE"メッセージの場合、ウィンドウを閉じる
                if message.strip() == "CLOSE":
                    logger.info("CLOSEメッセージを受信しました。ウィンドウを閉じます。")
                    if flet_page is not None and flet_page.window_visible:
                        global window_closed_by_server
                        window_closed_by_server = True
                        await message_queue.put(f"[{timestamp}] サーバーからのCLOSEコマンドによりウィンドウを閉じます")
                        await asyncio.sleep(1)  # メッセージを表示するための短い待機
                        await flet_page.run_async(lambda: flet_page.window_close())
                else:
                    # それ以外のメッセージでFletウィンドウが表示されていない場合は表示
                    if flet_page is None or not flet_page.window_visible:
                        # 別スレッドでFletウィンドウを起動
                        asyncio.create_task(show_flet_window())
                
            except websockets.exceptions.ConnectionClosed:
                logger.error("接続が閉じられました。再接続を試みます...")
                break
    except Exception as e:
        logger.error(f"受信処理でエラー発生: {e}")

# Fletウィンドウを表示する非同期関数
async def show_flet_window():
    try:
        global window_closed_by_server
        
        # Fletウィンドウが既に起動していれば何もしない
        if flet_page is not None and flet_page.window_visible:
            return
            
        # サーバーによって閉じられた場合のフラグをリセット
        window_closed_by_server = False
            
        # コンソールに表示
        logger.info("メッセージウィンドウを表示します")
        
        # 別スレッドでFletを実行
        await asyncio.get_event_loop().run_in_executor(
            None, 
            partial(
                ft.app, 
                target=init_page, 
                view=ft.AppView.WINDOW, 
                window_width=600,
                window_height=500,
                window_title="WebSocketクライアント"
            )
        )
    except Exception as e:
        logger.error(f"Fletウィンドウ表示エラー: {e}")

# ユーザー入力を処理する関数
async def process_user_input(websocket):
    try:
        while True:
            message = await asyncio.get_event_loop().run_in_executor(
                None, lambda: input("送信するメッセージを入力してください (終了するには 'exit' と入力): ")
            )
            
            if message.lower() == 'exit':
                logger.info("クライアントを終了します...")
                return
                
            if message.lower() == 'show':
                # 手動でFletウィンドウを表示
                await show_flet_window()
                continue
            
            logger.info(f"メッセージ送信中: {message}")
            await websocket.send(message)
    except Exception as e:
        logger.error(f"送信処理でエラー発生: {e}")

# プロキシ設定を使用して接続を確立
async def connect_to_server(server_url):
    http_proxy, https_proxy = get_proxy_settings()
    
    # プロキシ設定がある場合の処理
    proxy_params = {}
    if http_proxy:
        # プロキシURLからホストとポートを抽出
        proxy_url = http_proxy.replace('http://', '')
        if ':' in proxy_url:
            proxy_host, proxy_port = proxy_url.split(':')
            proxy_port = int(proxy_port)
        else:
            proxy_host = proxy_url
            proxy_port = 80
            
        proxy_params = {
            'proxy': http_proxy,
            'origin': f'http://{socket.gethostname()}'
        }
        
        logger.info(f"プロキシを使用: {proxy_host}:{proxy_port}")
    
    # 接続切断時に再接続を試みる
    reconnect_attempts = 0
    max_reconnect_attempts = 5
    reconnect_delay = 2
    
    while True:
        try:
            # websockets接続を確立
            async with websockets.connect(
                server_url,
                ping_interval=30,
                ping_timeout=10,
                **proxy_params
            ) as websocket:
                logger.info(f"サーバーに接続しました: {server_url}")
                reconnect_attempts = 0  # 接続成功したらリセット
                
                # サーバーからのメッセージ受信とユーザー入力処理を並行して実行
                await asyncio.gather(
                    receive_messages(websocket),
                    process_user_input(websocket)
                )
                
                # ユーザーが終了を選択した場合はループを抜ける
                break
                
        except websockets.exceptions.ConnectionClosed as e:
            reconnect_attempts += 1
            if reconnect_attempts <= max_reconnect_attempts:
                wait_time = reconnect_delay * reconnect_attempts
                logger.error(f"接続が閉じられました: コード {e.code}, 理由: {e.reason}")
                logger.info(f"{wait_time}秒後に再接続を試みます... (試行 {reconnect_attempts}/{max_reconnect_attempts})")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"再接続の最大試行回数に達しました。終了します。")
                break
        except Exception as e:
            reconnect_attempts += 1
            if reconnect_attempts <= max_reconnect_attempts:
                wait_time = reconnect_delay * reconnect_attempts
                logger.error(f"接続エラー: {e}")
                logger.info(f"{wait_time}秒後に再接続を試みます... (試行 {reconnect_attempts}/{max_reconnect_attempts})")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"再接続の最大試行回数に達しました。終了します。")
                break

async def main():
    if len(sys.argv) > 1:
        server_ip = sys.argv[1]
    else:
        server_ip = input("サーバーのIPアドレスを入力してください: ")
    
    server_url = f"ws://{server_ip}:8080"
    logger.info(f"接続先: {server_url}")
    
    await connect_to_server(server_url)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("クライアントを終了します...")
    except Exception as e:
        logger.error(f"予期せぬエラー: {e}")




【修正したクライアントコードの説明】
クライアントコードを要件に合わせて修正しました。主な変更点は以下の通りです：
  1. Fletフレームワークの追加
    Fletはシンプルで使いやすいPython UIフレームワークで、WebSocketクライアントにグラフィカルインターフェースを追加するために使用しています。
  2. サーバーメッセージ表示機能
    サーバーからメッセージを受信すると、自動的にFletウィンドウが表示されます
    受信したメッセージはタイムスタンプ付きでリストに表示されます
    メッセージはスクロール可能なリストで表示され、履歴が確認できます

  3. 非同期処理と並行実行
    WebSocketの通信処理とUI表示を並行して実行するため、非同期処理を実装しています
    メッセージキューを使用して、WebSocketスレッドとUIスレッド間の通信を行います



【更に修正したクライアントコードの説明】
サーバーからの特定のメッセージ（"CLOSE"）を受信した場合にウィンドウを閉じる機能を追加しました。主な変更点は以下の通りです：
    1. CLOSEメッセージ検出と処理
        WebSocketからメッセージを受信する部分で、受信したメッセージが "CLOSE" かどうかをチェックするようにしました。
        "CLOSE" メッセージの場合は、Fletウィンドウを閉じる処理を実行します：

        # "CLOSE"メッセージの場合、ウィンドウを閉じる
        if message.strip() == "CLOSE":
            logger.info("CLOSEメッセージを受信しました。ウィンドウを閉じます。")
            if flet_page is not None and flet_page.window_visible:
                global window_closed_by_server
                window_closed_by_server = True
                await message_queue.put(f"[{timestamp}] サーバーからのCLOSEコマンドによりウィンドウを閉じます")
                await asyncio.sleep(1)  # メッセージを表示するための短い待機
                await flet_page.run_async(lambda: flet_page.window_close())

    2. ウィンドウ閉じる理由を区別するためのフラグ追加
        ユーザーが手動でウィンドウを閉じた場合とサーバーからの"CLOSE"コマンドによって閉じた場合を区別するために、グローバル変数 window_closed_by_server を追加しました：

    3. UIの改善
        ウィンドウにステータスバーを追加して接続状態を表示するようにしました
        ウィンドウの下部に "CLOSE" コマンドについての説明を追加しました
        ウィンドウが閉じられる前に、閉じる理由を説明するメッセージを表示するようにしました
    
    4. ウィンドウクローズイベントのハンドリング
        ユーザーがウィンドウを閉じた場合のイベントハンドリングを追加し、ログにも記録するようにしました：
