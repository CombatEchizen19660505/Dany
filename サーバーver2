import asyncio
import websockets
import socket
import logging
import sys

# ロギングの設定
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("websocket-server")

# 接続中のクライアントを管理するセット
connected_clients = set()

# ローカルIPアドレスを取得
def get_local_ip():
    try:
        # テスト接続を作成してローカルIPを取得
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except Exception as e:
        logger.error(f"IPアドレス取得エラー: {e}")
        return "127.0.0.1"  # デフォルトでlocalhostを使用

# 全クライアントにメッセージを送信する関数
async def broadcast_message(message):
    if not connected_clients:
        logger.info("接続中のクライアントがありません")
        return
    
    disconnected_clients = set()
    
    for client in connected_clients:
        try:
            await client.send(message)
            logger.info(f"ブロードキャストメッセージを送信: {message} (宛先: {client.remote_address[0]})")
        except websockets.exceptions.ConnectionClosed:
            # 切断されたクライアントを記録
            disconnected_clients.add(client)
        except Exception as e:
            logger.error(f"メッセージ送信エラー: {e}")
            disconnected_clients.add(client)
    
    # 切断されたクライアントをリストから削除
    for client in disconnected_clients:
        connected_clients.remove(client)

# 特定のクライアントにメッセージを送信する関数
async def send_to_client(client_ip, message):
    target_client = None
    
    # 指定されたIPアドレスのクライアントを検索
    for client in connected_clients:
        if client.remote_address[0] == client_ip:
            target_client = client
            break
    
    if not target_client:
        logger.error(f"クライアント {client_ip} は接続されていません")
        return False
    
    try:
        await target_client.send(message)
        logger.info(f"個別メッセージを送信: {message} (宛先: {client_ip})")
        return True
    except websockets.exceptions.ConnectionClosed:
        connected_clients.remove(target_client)
        logger.error(f"クライアント {client_ip} は切断されています")
        return False
    except Exception as e:
        logger.error(f"メッセージ送信エラー: {e}")
        return False

# クライアントのリストを表示
def list_clients():
    if not connected_clients:
        logger.info("接続中のクライアントはありません")
        return
    
    logger.info("接続中のクライアント:")
    for i, client in enumerate(connected_clients, 1):
        logger.info(f"{i}. {client.remote_address[0]}")

# ユーザー入力を処理する関数
async def process_server_commands():
    while True:
        command = await asyncio.get_event_loop().run_in_executor(
            None, lambda: input("\nコマンド入力 ('help'でヘルプ表示): ")
        )
        
        if command.lower() == 'exit':
            logger.info("サーバーを終了します...")
            # サーバーを終了する
            sys.exit(0)
        
        elif command.lower() == 'help':
            print("\n利用可能なコマンド:")
            print("  list - 接続中のクライアント一覧を表示")
            print("  broadcast <メッセージ> - 全クライアントにメッセージを送信")
            print("  send <クライアントIP> <メッセージ> - 特定のクライアントにメッセージを送信")
            print("  exit - サーバーを終了")
            print("  help - このヘルプを表示\n")
        
        elif command.lower() == 'list':
            list_clients()
        
        elif command.lower().startswith('broadcast '):
            # broadcastの後のスペースを考慮して9文字目から取得
            message = command[10:]
            if message:
                await broadcast_message(message)
            else:
                logger.error("メッセージを入力してください")
        
        elif command.lower().startswith('send '):
            parts = command.split(' ', 2)
            if len(parts) < 3:
                logger.error("使用法: send <クライアントIP> <メッセージ>")
            else:
                client_ip = parts[1]
                message = parts[2]
                await send_to_client(client_ip, message)
        
        else:
            logger.error("無効なコマンドです。'help'と入力してヘルプを表示してください")

# メッセージハンドラ
async def message_handler(websocket, path):
    client_ip = websocket.remote_address[0]
    logger.info(f"クライアント接続: {client_ip}")
    
    # クライアントをセットに追加
    connected_clients.add(websocket)
    
    try:
        async for message in websocket:
            logger.info(f"受信メッセージ: {message} (送信元: {client_ip})")
            
            # クライアントからのメッセージを処理して応答
            response = f"メッセージを受信しました: {message}"
            await websocket.send(response)
            logger.info(f"応答を送信: {response}")
            
    except websockets.exceptions.ConnectionClosed as e:
        logger.info(f"クライアント切断: {client_ip}, コード: {e.code}, 理由: {e.reason}")
    except Exception as e:
        logger.error(f"エラー発生: {e}")
    finally:
        # 切断されたクライアントをセットから削除
        if websocket in connected_clients:
            connected_clients.remove(websocket)
        logger.info(f"クライアント {client_ip} の接続を終了しました")

async def main():
    local_ip = get_local_ip()
    port = 8080
    
    logger.info(f"サーバー起動中... IP: {local_ip}, ポート: {port}")
    
    # プロキシ設定がある場合でも問題ないようにすべてのインターフェースでリッスン
    server = await websockets.serve(
        message_handler, 
        "0.0.0.0",  # すべてのネットワークインターフェースをリッスン
        port,
        ping_interval=30,  # プロキシで切断されないようにping間隔を設定
        ping_timeout=10
    )
    
    logger.info(f"WebSocketサーバーが起動しました - ws://{local_ip}:{port}")
    logger.info("コマンドを入力するか、終了するには 'exit' を入力してください")
    
    # サーバー実行とコマンド処理を並行して実行
    await asyncio.gather(
        server.wait_closed(),
        process_server_commands()
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("サーバーを終了します...")
    except Exception as e:
        logger.error(f"予期せぬエラー: {e}")



主な変更点
1.クライアント管理機能の追加:
  connected_clients セットを使用して接続中のクライアントを追跡します
  新しい接続があるとセットに追加し、切断時に削除します

2.メッセージ送信機能の追加:
  broadcast_message(): 全クライアントにメッセージを送信する関数
  send_to_client(): 特定IPアドレスのクライアントにのみメッセージを送信する関数

3.コマンドインターフェースの追加:
  process_server_commands(): サーバー側でのコマンド入力を処理する関数
  サーバー実行中にコマンドを入力できるように非同期処理を実装

  以下のコマンドを実装:
    list: 接続中のクライアント一覧を表示
    broadcast <メッセージ>: 全クライアントにメッセージを送信
    send <クライアントIP> <メッセージ>: 特定クライアントにメッセージを送信
    help: ヘルプメッセージを表示
    exit: サーバーを終了

4.並列処理の実装:
  サーバープロセスとコマンド処理プロセスをasyncio.gather()で並行して実行
  非ブロッキングな入力処理のためrun_in_executorを使用

5.エラー処理の強化:
  切断されたクライアントを適切に処理
  例外処理を追加してより堅牢な実装に

このコードを使用することで、サーバーは接続されたクライアントを追跡し、コマンドラインインターフェースを通じて任意のタイミングでメッセージを送信できるようになります。
